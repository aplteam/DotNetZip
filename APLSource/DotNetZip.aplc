:Class DotNetZip
⍝ Zipping and unzipping with .NET on Windows, Linux and Mac-OS, prefferably with .NET Core.\\
⍝ This class offers shared methods for zipping a folder and unzippping a zip file but can also
⍝ be instantiated. With `⎕NEW` either a new zip file is created or an existing one is opened.\\
⍝ You can then use the function `Add`, `List`, `Update` and `Delete` as instance methods.\\
⍝ This class requires the class `FilesAndDirs`.

    ⎕io←1 ⋄ ⎕ml←1

    ∆INIT←0

    ∇ r←Version
      :Access Public Shared
      r←'DotNetZip' '0.1.0' '2020-05-07'
    ∇

    ∇ History
    ⍝ * 0.1.0 from 2020-05-07
    ⍝   * Very first version
    ∇

    ∇ make1(zipFilename);stream
      :Access Public Instance
      :Implements Constructor
      Initialize ⍬
      zipFilename←AddExtension F.ExpandPath zipFilename
      stream←System.IO.File.Open(zipFilename System.IO.FileMode.OpenOrCreate)
      :If F.Exists zipFilename
          _zip←⎕NEW System.IO.Compression.ZipArchive(stream System.IO.Compression.ZipArchiveMode.Update)
      :Else
          _zip←⎕NEW System.IO.Compression.ZipArchive(stream System.IO.Compression.ZipArchiveMode.Create)
      :EndIf
      _zip.⎕DF'[archive:',zipFilename,']'
    ⍝Done
    ∇
⍝ ------------------------ Instance stuff

    ∇ {r}←{x}Add filename;filename2;drop
    ⍝ Use this to add a file to the ZIP file.\\
    ⍝ By default the name in the zip file is the same as `filename`. You may specify an alternative via
    ⍝ the left argument.\\
    ⍝ You can also specify the number of levels in the path that should be dropped from the path by specifying
    ⍝ an integer as right argument. For example, when the right argument is `./foo1/foo2/foo3/abc.txt` then a left
    ⍝ argument of 2 will make sure that the file is saved as `./foo3/abc.txt`.\\
      :Access Public Instance
      filename2←filename
      drop←0
      :If 2=⎕NC'x'
          :If 0=1↑0⍴⊂x
              drop←x
          :Else
              filename2←x
          :EndIf
      :EndIf
      '"drop" must be 0 or larger'Assert 0≤drop
      (filename filename2)←F.NormalizePath filename filename2
      :If drop>0
          filename2↓⍨←1++/drop>+\filename2∊'/\'
      :EndIf
      r←System.IO.Compression.ZipFileExtensions.CreateEntryFromFile _zip filename filename2
    ∇

    ∇ {r}←List
    ⍝ Lists the contents of the ZIP file
      :Access Public Instance
      r←⌷_zip.Entries
      r←r.ToString
    ∇

    ∇ {r}←Dispose
    ⍝ Use this to close the stream
      :Access Public Instance
      r←⍬
      _zip.Dispose 
    ∇

⍝ ------------------------ Shared stuff

    ∇ Cleanup
      :Implements Destructor
      :Trap 6 90
          _zip.Dispose
      :Case 90
          Assert'Cannot access a closed file.'≡⎕EXCEPTION.Message
      :EndTrap
    ∇

    ∇ {r}←zipfile UnzipTo targetFolder
    ⍝ Unzip ⍵ into ⍺.\\
    ⍝ `targetFolder` must not yet exist.
      :Access Public Shared
      r←Initialize ⍬
      System.IO.Compression.ZipFile.ExtractToDirectory zipfile targetFolder
    ⍝Done
    ∇

    ∇ {targetFile}←sourceFolder ZipFolder targetFile
    ⍝ Takes a folder and zips it. `target` must not exist.
      :Access Public Shared
      r←⍬
      Initialize ⍬
      targetFile←F.ExpandPath AddExtension targetFile
      sourceFolder←F.ExpandPath sourceFolder
      System.IO.Compression.ZipFile.CreateFromDirectory sourceFolder targetFile
    ⍝Done
    ∇

⍝ ------------------------ Private stuff -------------------

    ∇ {r}←Initialize dummy;notwindows;netcoreset
      r←⍬
      :If 0=∆INIT
          F←(⊃⊃⎕CLASS ⎕THIS).##.FilesAndDirs
          notwindows←'Win'≢3↑⊃# ⎕WG'APLVersion'
          netcoreset←(,'1')≡2 ⎕NQ'.' 'GetEnvironment' 'DYALOG_NETCORE'
          :If notwindows∨netcoreset                      ⍝ Under Windows, switch selects .NET version
              ⎕USING←',System.IO.Compression.ZipFile' ',System.IO.Compression' ',System.IO.FileSystem' ⍝ .NET Core bridge: Lookup by name
⍝             ⎕USING←',System.IO.Compression.ZipFile'    ⍝ .NET Core bridge: Lookup by name
          :Else
              ⎕USING←',System.IO.Compression.DLL' ',System.IO.Compression.FileSystem.DLL'
          :EndIf
          ∆INIT←1
      :EndIf
    ∇

      AddExtension←{
      ⍝ ⍵ is a filename. If it has no extension ".zip" is added, otherwise it is left alone
          ⊃,/{(1⊃⍵),(2⊃⍵),{0=≢⍵:'.zip' ⋄ ⍵}3⊃⍵}⎕NPARTS ⍵
      }

    Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←3 ⋄ ⍺ ⎕SIGNAL 1↓(↑∊⍵),11}

:EndClass
