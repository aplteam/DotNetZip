:Class DotNetZip
⍝ Zipping and unzipping with .NET Core on Windows, Linux and Mac-OS.\\
⍝ This class offers three shared methods:
⍝ * `ZipFolder`
⍝ * `UnzipTo`
⍝ * `ListZipContents`
⍝ For more advanced features the class can also be instantiated.\\
⍝ With `⎕NEW` either a new zip file is created or an existing one is opened,
⍝ depending on the arguments passed onto the constructor. By default any existing zip file is overwritten.\\
⍝ You can then use these instance methods:
⍝ * `Add`
⍝ * `Delete`
⍝ * `List`
⍝ * `Dispose`\\
⍝ Once instanciated the read-only property `filename` carries the name of the ZIP file.\\
⍝ This class requires the class `FilesAndDirs` and the namespace script `APLTreeUtils`.\\
⍝ Kai Jaeger - APL Team Ltd.\\
⍝ Homepage: <https://github.com/aplteam/DotNetZip/>

    ⎕IO←1 ⋄ ⎕ML←1

    ∆INIT←0

    ∇ r←Version
      :Access Public Shared
      r←'DotNetZip' '0.8.1.34' '2020-08-07'
    ∇

    ∇ History
    ⍝ * 0.8.1 from 2020-08-07
    ⍝   * Workaround implemented for bug with ⎕USING that caused a nonsense VALUE ERROR. (Mantis 18404)\\
    ⍝     The bugs makes an appearance when the class is instanciated in ⎕SE, then a )CLEAR command is issued
    ⍝     and then again instantiated: you get a VALUE ERROR on a .NET function that is there, at least a bit.
    ⍝ * 0.8.0 from 2020-07-04
    ⍝   * `Add` is now effectively doing a "Replace" in case the file(s) in question are already part of
    ⍝     the ZIP. The `Update` method has been removed.
    ⍝ * 0.7.0 from 2020-07-03
    ⍝   * The default for "overwriteFlag" when only a zip filename was passed was 1. Should be 0.
    ⍝ * 0.6.0 from 2020-05-24
    ⍝   * `Add` now accepts and processes folders as well as files
    ⍝   * Documentation improved
    ⍝ * 0.5.1 from 2020-05-12
    ⍝   * Minor bug fix in `ZipFolder`
    ⍝ * 0.5.0 from 2020-05-09
    ⍝   * First version published on GitHub as beta
    ∇

    :Property  filename
    :Access Public Instance
        ∇ r←Get
          r←_filename
        ∇
    :EndProperty

    ∇ make1(zipFilename)
    ⍝ Constructor that takes just one argument: the name of the ZIP file.\\
    ⍝ If `zipFilename` already exists it is overwritten.
      :Access Public Instance
      :Implements Constructor
      overwriteFlag←0
      make zipFilename overwriteFlag
    ⍝Done
    ∇

    ∇ make2(zipFilename overwriteFlag)
    ⍝ Constructor that takes two arguments:
    ⍝ * the name of the ZIP file
    ⍝ * Boolean for `overwriteFlag`
    ⍝ `overwriteFlag` defaults to 1. If `overwriteFlag` is 0 and there is already a ZIP file with that
    ⍝ name it is not overwritten but opened.
      :Access Public Instance
      :Implements Constructor
      '"overwriteFlag" must be a Boolean'⎕SIGNAL 11/⍨~(⊂overwriteFlag)∊0 1
      make zipFilename overwriteFlag
    ⍝Done
    ∇

    ∇ make(zipFilename overwriteFlag);stream
      CheckMinVersion ⍬
      Initialize ⍬
      zipFilename←AddExtension F.ExpandPath zipFilename
      :If F.Exists zipFilename
      :AndIf 0=overwriteFlag
          stream←System.IO.File.Open(zipFilename System.IO.FileMode.Open)
          _zip←⎕NEW System.IO.Compression.ZipArchive(stream System.IO.Compression.ZipArchiveMode.Update)
      :Else
          F.DeleteFile zipFilename
          stream←System.IO.File.Open(zipFilename System.IO.FileMode.CreateNew)
          _zip←⎕NEW System.IO.Compression.ZipArchive(stream System.IO.Compression.ZipArchiveMode.Create)
          _zip.Dispose
          ⍝ `List` is not available in "Create" mode, so we re-open it
          stream←System.IO.File.Open(zipFilename System.IO.FileMode.Open)
          _zip←⎕NEW System.IO.Compression.ZipArchive(stream System.IO.Compression.ZipArchiveMode.Update)
      :EndIf
      _zip.⎕DF'[archive:',zipFilename,']'
      _filename←zipFilename
    ⍝Done
    ∇
⍝ ------------------------ Instance stuff

    ∇ {r}←{parent}Add toBeZipped;list;isDir
    ⍝ Use this to add one or more files to the ZIP file.\\
    ⍝ `toBeZipped` specifies the full path (or full paths) of what's going to be zipped. That's what's going to be
    ⍝ stored in the ZIP file.\\
    ⍝ If `toBeZipped` refers to a full path as in `C:\Foo.txt` or `/tmp/myfile` or, much more likely, refers to
    ⍝ the current directory as in `./foo.txt` then there is no need to specify the optional left argument.\\
    ⍝ If however you want to store the file `C:\Projects\Foo\docs\ReadMe.txt`, but it should be saved in the ZIP
    ⍝ file as `docs\ReadMe.txt`, then you must call `Add` like this:
    ⍝ ```
    ⍝ `C:\Projects\Foo` myDotNetZip.Add `docs\ReadMe.txt`
    ⍝ ```
    ⍝ Notes:
    ⍝ * `parent` might or might not have a trailing separator, and `toBeZipped` might or might not have a
    ⍝ leading separator: `Add` works that out.
    ⍝ * While `parent`, if specified, must be a simple string, `toBeZipped` might be simple (single file) or nested, when
    ⍝ every single item is treated as the name of a file or a folder.\\
    ⍝ Returns `⍬` (shy).
      :Access Public Instance
      r←⍬
      parent←{0<⎕NC ⍵:⍎⍵ ⋄ ''}'parent'
      parent←F.NormalizePath{0=≢⍵:⍵ ⋄ ⍵,(~'/\'∊⍨¯1↑⍵)/F.CurrentSep}parent
      :If (≡toBeZipped)∊0 1
          toBeZipped←F.NormalizePath{⍵↓⍨'/\'∊⍨1⍴⍵}toBeZipped
          :If F.IsDir parent,toBeZipped
              :If 0<≢list←⊃('recursive' 1)F.Dir parent,toBeZipped,'/*'
              :AndIf 0<≢list←(F.IsFile list)/list
                  list←(≢parent)↓¨list
                  parent∘Add_¨list
              :EndIf
          :Else
              parent Add_ toBeZipped
          :EndIf
      :Else
          toBeZipped←F.NormalizePath∘{⍵↓⍨'/\'∊⍨1⍴⍵}¨toBeZipped
          isDir←F.IsDir parent∘,¨toBeZipped
          :If ∨/~isDir
              parent∘Add_¨(~isDir)/toBeZipped
          :EndIf
          :If ∨/isDir
              parent∘Add¨isDir/toBeZipped
          :EndIf
      :EndIf
    ∇

    ∇ r←List;collection
    ⍝ Lists the contents of the ZIP file
      :Access Public Instance
      collection←⌷_zip.Entries
      r←collection.ToString
    ∇

    ∇ {r}←Delete filenames;bool;toBeDeleted
    ⍝ Delete one or more files from the ZIP.\\
    ⍝ Returns `⍬` (shy).
      :Access Public Instance
      r←⍬
      filenames←⊆F.NormalizePath filenames
      :If 0<+/bool←(⍕¨⌷_zip.Entries)∊filenames
          toBeDeleted←bool/⌷_zip.Entries
          toBeDeleted.Delete
      :EndIf
    ∇

    ∇ {r}←Dispose
    ⍝ Use this to close the `ZipArchive` instance.\\
    ⍝ Note that deleteting a instance of `DotNetZip` has the same effect as calling this method.
    ⍝ Returns `⍬` (shy).
      :Access Public Instance
      r←⍬
      :If 0<⎕NC'_zip'
          _zip.Dispose
          ⎕EX'_zip'
      :EndIf
    ∇

⍝ ------------------------ Shared stuff

    ∇ Cleanup
      :Implements Destructor
      ⍝ Calls the `Dispose` method and deletes `_zip`
      :Trap 6 90
          _zip.Dispose
      :Case 90
          Assert'Cannot access a closed file.'≡⎕EXCEPTION.Message
      :EndTrap
      ⎕EX'_zip'
    ∇

    ∇ {r}←zipfile UnzipTo targetFolder
    ⍝ Unzip `⍵` into `⍺`.\\
    ⍝ `targetFolder` must not yet exist.
      :Access Public Shared
      r←Initialize ⍬
      :Trap 6
          System.IO.Compression.ZipFile.ExtractToDirectory zipfile targetFolder
      :Else
          ⍝ Workaround for bug Mantis 18404 from 2020-08
          ⍝ The VALUE ERROR is not really a VALUE ERROR. This appears to happen only when `DotNetZip` is instanciated
          ⍝ within `⎕SE`, the )CLEAR is issed and then again `DotNetZip` instanciated within `⎕SE`.
          ⎕EX'System'
          System.IO.Compression.ZipFile.ExtractToDirectory zipfile targetFolder
      :EndTrap
    ⍝Done
    ∇

    ∇ {targetFile}←sourceFolder ZipFolder targetFile
    ⍝ Takes a folder and zips it. `target` must not exist.\\
    ⍝ Returns the fully expanded name of the `targetFile`.
      :Access Public Shared
      Initialize ⍬
      targetFile←F.ExpandPath AddExtension targetFile
      sourceFolder←F.ExpandPath sourceFolder
      System.IO.Compression.ZipFile.CreateFromDirectory sourceFolder targetFile
    ⍝Done
    ∇

    ∇ r←ListZipContents zipfile;myZip
      :Access Public Shared
    ⍝ Helper that instantiates the `DotNetZip` class just for the purpose of unzipping a zip file.
      myZip←⎕NEW ⎕THIS(zipfile 0)
      r←myZip.List
    ∇

⍝ ------------------------ Private stuff -------------------

    ∇ {r}←Initialize dummy;notwindows;netcoreset
      r←⍬
      CheckMinVersion ⍬
      :If 0=∆INIT
          F←(⊃⊃⎕CLASS ⎕THIS).##.FilesAndDirs
          notwindows←'Win'≢3↑⊃# ⎕WG'APLVersion'
          netcoreset←(,'1')≡2 ⎕NQ'.' 'GetEnvironment' 'DYALOG_NETCORE'
          :If notwindows∨netcoreset                      ⍝ Under Windows, switch selects .NET version
              ⎕USING←',System.IO.Compression.ZipFile' ',System.IO.Compression' ',System.IO.FileSystem' ⍝ .NET Core bridge: Lookup by name
⍝             ⎕USING←',System.IO.Compression.ZipFile'    ⍝ .NET Core bridge: Lookup by name
          :Else
              ⎕USING←',System.IO.Compression.DLL' ',System.IO.Compression.FileSystem.DLL'
          :EndIf
          ∆INIT←1
      :EndIf
    ∇

    ∇ {r}←parent Add_ toBeZipped
      Delete toBeZipped
      r←System.IO.Compression.ZipFileExtensions.CreateEntryFromFile _zip(parent,toBeZipped)toBeZipped
    ∇

      AddExtension←{
      ⍝ ⍵ is a filename. If it has no extension ".zip" is added, otherwise it is left alone
          ⊃,/{(1⊃⍵),(2⊃⍵),{0=≢⍵:'.zip' ⋄ ⍵}3⊃⍵}⎕NPARTS ⍵
      }

    Assert←{⍺←'' ⋄ (,1)≡,⍵:r←1 ⋄ ⎕ML←3 ⋄ ⍺ ⎕SIGNAL 1↓(↑∊⍵),11}

      IfAtLeastVersion←{
      ⍝ ⍵ is supposed to be a number like 15 or 17.1, representing a version of Dyalog APL.
      ⍝ Returns a Boolean that is 1 only if the current version is at least as good.
          ⍵≤{⊃(//)⎕VFI ⍵/⍨2>+\'.'=⍵}2⊃# ⎕WG'APLVersion'
      }

      CheckMinVersion←{
          IfAtLeastVersion 16:shy←1
          'This class requires at least version 16.0 of Dyalog APL'⎕SIGNAL 11
      }

:EndClass
